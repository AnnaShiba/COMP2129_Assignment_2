// <auto-generated />
using System;
using COMP2139_Assignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace COMP2139_Assignment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240221033243_CarRentalsInitiation")]
    partial class CarRentalsInitiation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("COMP2139_Assignment.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("HotelId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            EndDate = new DateTime(2024, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 1,
                            HotelId = 1,
                            StartDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingId = 2,
                            EndDate = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 2,
                            HotelId = 2,
                            StartDate = new DateTime(2024, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<string>("Amentities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Reviews")
                        .HasColumnType("float");

                    b.HasKey("HotelId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            Amentities = "All-inclusive resort with outdoor pool and beach access",
                            Image = "",
                            Location = "Varadero",
                            Name = "Villa Coco",
                            Price = 299.99000000000001,
                            Reviews = 4.5
                        },
                        new
                        {
                            HotelId = 2,
                            Amentities = "All-inclusive resort with beach access",
                            Image = "",
                            Location = "Varadero",
                            Name = "Hotel Varadero",
                            Price = 199.99000000000001,
                            Reviews = 3.7000000000000002
                        },
                        new
                        {
                            HotelId = 3,
                            Amentities = "All-inclusive resort with beach access",
                            Image = "",
                            Location = "Varadero",
                            Name = "Playa Azul",
                            Price = 229.99000000000001,
                            Reviews = 4.0999999999999996
                        },
                        new
                        {
                            HotelId = 4,
                            Amentities = "Island resort with bungalows",
                            Image = "",
                            Location = "Varadero",
                            Name = "Hotel Cubana",
                            Price = 249.49000000000001,
                            Reviews = 4.0
                        },
                        new
                        {
                            HotelId = 5,
                            Amentities = "In historical part of the town",
                            Image = "",
                            Location = "Munich",
                            Name = "Hotel Excellent",
                            Price = 149.00999999999999,
                            Reviews = 4.0999999999999996
                        },
                        new
                        {
                            HotelId = 6,
                            Amentities = "Cute mountain hotel",
                            Image = "",
                            Location = "Munich",
                            Name = "Le Daufin",
                            Price = 180.00999999999999,
                            Reviews = 4.0999999999999996
                        },
                        new
                        {
                            HotelId = 7,
                            Amentities = "Old luxury hotel in the heart of the city",
                            Image = "",
                            Location = "Munich",
                            Name = "Kaiser Hotel",
                            Price = 499.0,
                            Reviews = 5.0
                        },
                        new
                        {
                            HotelId = 8,
                            Amentities = "Authentic Japanese hotel",
                            Image = "",
                            Location = "Tokyo",
                            Name = "Sakura Tower",
                            Price = 179.00999999999999,
                            Reviews = 4.7999999999999998
                        },
                        new
                        {
                            HotelId = 9,
                            Amentities = "Authentic Japanese hotel",
                            Image = "",
                            Location = "Tokyo",
                            Name = "Shinjuku Hotel",
                            Price = 129.99000000000001,
                            Reviews = 3.6000000000000001
                        },
                        new
                        {
                            HotelId = 10,
                            Amentities = "Newly built modern hotel with gym and indoor pool",
                            Image = "",
                            Location = "Tokyo",
                            Name = "Gojira Hotel",
                            Price = 299.99000000000001,
                            Reviews = 4.5
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment.Models.CarRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AvailableUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarRentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableFrom = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            AvailableUntil = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Color = "Blue",
                            IsAvailable = true,
                            Make = "Toyota",
                            Model = "Camry",
                            PricePerDay = 50.00m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            AvailableFrom = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            AvailableUntil = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Color = "White",
                            IsAvailable = true,
                            Make = "Ford",
                            Model = "Focus",
                            PricePerDay = 45.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 3,
                            AvailableFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Red",
                            IsAvailable = true,
                            Make = "Honda",
                            Model = "Civic",
                            PricePerDay = 40.00m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 4,
                            AvailableFrom = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            IsAvailable = true,
                            Make = "Chevrolet",
                            Model = "Malibu",
                            PricePerDay = 55.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 5,
                            AvailableFrom = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Yellow",
                            IsAvailable = true,
                            Make = "Ford",
                            Model = "Mustang",
                            PricePerDay = 75.00m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 6,
                            AvailableFrom = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "White",
                            IsAvailable = true,
                            Make = "Tesla",
                            Model = "Model 3",
                            PricePerDay = 85.00m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 7,
                            AvailableFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Blue",
                            IsAvailable = true,
                            Make = "BMW",
                            Model = "3 Series",
                            PricePerDay = 90.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 8,
                            AvailableFrom = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Grey",
                            IsAvailable = true,
                            Make = "Audi",
                            Model = "A4",
                            PricePerDay = 95.00m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 9,
                            AvailableFrom = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            IsAvailable = true,
                            Make = "Mercedes",
                            Model = "Benz C-Class",
                            PricePerDay = 100.00m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 10,
                            AvailableFrom = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableUntil = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Silver",
                            IsAvailable = true,
                            Make = "Nissan",
                            Model = "Altima",
                            PricePerDay = 50.00m,
                            Year = 2018
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReturnFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlightId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            Airline = "Air Canada",
                            DepartureFrom = new DateTime(2024, 5, 13, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            DepartureTo = new DateTime(2024, 5, 13, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Varadero",
                            Price = 300.0,
                            ReturnFrom = new DateTime(2024, 5, 27, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            ReturnTo = new DateTime(2024, 5, 27, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Source = "Toronto"
                        },
                        new
                        {
                            FlightId = 2,
                            Airline = "Air Canada",
                            DepartureFrom = new DateTime(2024, 4, 13, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            DepartureTo = new DateTime(2024, 4, 13, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Varadero",
                            Price = 249.0,
                            ReturnFrom = new DateTime(2024, 4, 27, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            ReturnTo = new DateTime(2024, 4, 27, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Source = "Toronto"
                        },
                        new
                        {
                            FlightId = 3,
                            Airline = "Nippon Airways",
                            DepartureFrom = new DateTime(2024, 4, 13, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            DepartureTo = new DateTime(2024, 4, 13, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Tokyo",
                            Price = 1699.0,
                            ReturnFrom = new DateTime(2024, 4, 27, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            ReturnTo = new DateTime(2024, 4, 27, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Source = "Toronto"
                        },
                        new
                        {
                            FlightId = 4,
                            Airline = "Lufthansa",
                            DepartureFrom = new DateTime(2024, 4, 13, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            DepartureTo = new DateTime(2024, 4, 13, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Munich",
                            Price = 1070.0,
                            ReturnFrom = new DateTime(2024, 4, 27, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            ReturnTo = new DateTime(2024, 4, 27, 10, 10, 0, 0, DateTimeKind.Unspecified),
                            Source = "Toronto"
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment.Models.Booking", b =>
                {
                    b.HasOne("COMP2139_Assignment.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP2139_Assignment.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Hotel");
                });
#pragma warning restore 612, 618
        }
    }
}
